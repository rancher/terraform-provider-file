name: Backports
# This workflow generates "backport" issues when a release branch label is added to an issue
on:
  issues:
    types: [labeled] # triggered when any label is added to an issue

jobs:
  create-issue:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.label.name, 'release/v') }}
    steps:
      - name: Find and Verify PR Number
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v7.0.1 https://github.com/actions/github-script
        id: extract_pr
        with:
          script: |
            const body = context.payload.issue.body;
            const regex = /#(\d+)/g;
            const matches = body.matchAll(regex);
            const potentialNumbers = Array.from(matches, m => m[1]);
            for (const number of potentialNumbers) {
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: number,
                });
                if (issue.pull_request) {
                  return number;
                }
              } catch (error) { /* ignore */ }
            }
            core.setFailed('No valid PR found.');
      - name: Create GitHub Issue
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v7.0.1 https://github.com/actions/github-script
        with:
          script: |
            const labelName = context.payload.label.name;
            const parentIssue = context.payload.issue;
            const parentIssueTitle = parentIssue.title;
            const parentIssueNumber = parentIssue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const parentIssueBody = parentIssue.body;
            const assignees = ['matttrach', 'jiaqiluo', 'HarrisonWAffel'];

            const { data: pr } = await github.rest.issues.get({
              owner: owner,
              repo: repo,
              issue_number: ${{ steps.extract_pr.outputs.result }}
            });
            const prNumber = pr.number;

            // Note: can't get terraform-maintainers team, the default token can't access org level objects
            // Create the sub-issue
            const newIssue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: `Backport #${prNumber} to ${labelName}`,
              body:  [
                `Backport #${prNumber} to ${labelName} for #${parentIssueNumber}`,
                `Copied from PR:`,
                `${pr.body}`
              ].join("\n\n"),
              labels: [labelName],
              assignees: assignees
            });
            const subIssueId = newIssue.data.id;

            // Attach the sub-issue to the parent, use REST API because there isn't a github-script API yet.
            await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues', {
              owner: owner,
              repo: repo,
              issue_number: parentIssueNumber,
              sub_issue_id: subIssueId,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            });
