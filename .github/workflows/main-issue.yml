name: MainIssue
# This workflow generates a "main" issue when a PR is created targeting main.
on:
  pull_request_target:
    branches: [main]
    types: [opened]

jobs:
  generate-issue:
    name: 'Create Main Issue'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const pr = context.payload.pull_request;
            const newLabels = ['internal/main'];
            const releaseLabel = pr.labels.find(label => label.name.startsWith('release/v'));
            if (releaseLabel) {
              const versionLabel = releaseLabel.name.replace('release/', 'version/');
              newLabels.push(versionLabel);
            }
            const fs = require('fs'); // Import the Node.js file system module
            const fileContent = fs.readFileSync('.github/terraform-maintainers', 'utf8');
            const assignees = fileContent.split('\n').map(u => u.trim()).filter(Boolean);
            if (assignees.length === 0) {
              console.log('No assignees found in the team file.');
              return;
            }

            // Note: can't get terraform-maintainers team, the default token can't access org level objects
            // Create the main issue
            // https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#create-an-issue
            // Note: issues can't have teams assigned to them
            const newIssue = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: pr.title,
              body:  "This is the main issue tracking #" + pr.number + " \n\n" +
                "Please add labels indicating the release versions eg. 'version/v0' \n\n" +
                "Please add comments for user issues which this issue addresses. \n\n" +
                "Description copied from PR: \n" + pr.body,
              labels: newLabels,
              assignees: assignees
            });
            if (releaseLabel) {
              // if release label detected, then add appropriate sub-issues
              const parentIssue = newIssue.data;
              const parentIssueTitle = parentIssue.title;
              const parentIssueNumber = parentIssue.number;
              // Note: can't get terraform-maintainers team, the default token can't access org level objects
              // Create the sub-issue
              const newSubIssue = await github.rest.issues.create({
                owner: owner,
                repo: repo,
                title: `Backport #${pr.number} to release/v0`,
                body:  `Backport #${pr.number} to release/v0 for #${parentIssueNumber}`,
                labels: ['release/v0'],
                assignees: assignees
              });
              const subIssueId = newSubIssue.data.id;
              // Attach the sub-issue to the parent using API request
              await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues', {
                owner: owner,
                repo: repo,
                issue_number: parentIssueNumber,
                sub_issue_id: subIssueId,
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              });
            }
