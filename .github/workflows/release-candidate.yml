name: release-candidate

on:
  push:
    branches:
    - release/v*

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
      actions: read
    steps:
      - uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c # v4.3.0 https://github.com/googleapis/release-please-action/commits/main/
        name: release-please
        id: release-please
        with:
          skip-github-pull-request: true
          skip-github-release: false
          config-file: release-please-config-rc.json
          manifest-file: .release-please-manifest.json
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0 https://github.com/actions/checkout
        if: steps.release-please.outputs.version
        with:
          fetch-depth: 0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0 https://github.com/actions/setup-go
        if: steps.release-please.outputs.version
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: retrieve GPG Credentials
        if: steps.release-please.outputs.version
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/signing/gpg passphrase | GPG_PASSPHRASE ;
            secret/data/github/repo/${{ github.repository }}/signing/gpg privateKeyId | GPG_KEY_ID ;
            secret/data/github/repo/${{ github.repository }}/signing/gpg privateKey | GPG_KEY
      - name: import_gpg_key
        if: steps.release-please.outputs.version
        env:
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ env.GPG_KEY_ID }}
          GPG_KEY: ${{ env.GPG_KEY }}
        run: |
          cleanup() {
            # clear history just in case
            history -c
          }
          trap cleanup EXIT TERM

          # sanitize variables
          if [ -z "${GPG_PASSPHRASE}" ]; then echo "gpg passphrase empty"; exit 1; fi
          if [ -z "${GPG_KEY_ID}" ]; then echo "key id empty"; exit 1; fi
          if [ -z "${GPG_KEY}" ]; then echo "key contents empty"; exit 1; fi

          echo "Importing gpg key"
          echo "${GPG_KEY}" | gpg --import --batch > /dev/null || { echo "Failed to import GPG key"; exit 1; }
      - name: Run GoReleaser
        if: steps.release-please.outputs.version
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_KEY_ID: ${{ env.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ env.GPG_PASSPHRASE }}
